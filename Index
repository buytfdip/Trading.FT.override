trading = require 'trading'
talib = require 'talib'
params = require 'params'

#parameters
DATA_INPUT = params.addOptions 'Data input', ['Close', 'Typical', 'Weighted', 'Heikin-Ashi'], 'Heikin-Ashi'
NUMBER_OF_DAYS = params.add "Number of days used for calculations", 2
CONSECUTIVE_BUY_SIGNALS = params.add "Consecutive buy signals required", 1
CONSECUTIVE_SELL_SIGNALS = params.add "Consecutive sell signals required", 1
# order splits
PCT_OF_FUNDS_BUY = params.add "% of funds to use for buy orders", 100
PCT_OF_ASSETS_SELL = params.add "% of assets to use for sell orders", 100
BOOK_PROFIT_PCT = params.add "% gain before taking profits (set to 0 to disable)", 17.5
PCT_TO_BOOK = params.add "% of holdings to sell when booking profits", 100
STOP_LOSS_PCT = params.add "% loss before stop loss order (set to 0 to disable)", 7.5
PCT_OF_SPLIT = params.add "% iceberg split", 101
#indicators
RSI_P = params.add "RSI time period", 25
RSI_L = params.add "RSI look back period", 3
MAC_FA_P = params.add "MACD fast time period", 3
MAC_SL_P = params.add "MACD slow time period", 10
MAC_SI_P = params.add "MACD signal time period", 16
MAC_O = params.add "MACD Buy Signal Override Level", 3
MAC_L = params.add "MACD look back period", 3
#order type
MINIMUM_ORDER_VALUE = params.add "Minimum order value (exchange threshold)", .001
ORDER_TYPE = params.addOptions 'Global order type', ['market', 'limit', 'iceberg'], 'market'
ORDER_PRICE = params.add 'Global trades at [Market Price x]', 1.00
ORDER_TYPE2 = params.addOptions 'Profit taking order type', ['market', 'limit', 'iceberg'], 'market'
ORDER_PRICE2 = params.add 'Profit taking trades at [Market Price x]', 1.00
ORDER_TYPE3 = params.addOptions 'Stop loss order type', ['market', 'limit', 'iceberg'], 'market'
ORDER_PRICE3 = params.add 'Stop loss trades at [Market Price x]', 1

#instrument algos
makeInstrument = (instrument) ->
	switch DATA_INPUT
		when 'Typical'
			instrument.close = talib.TYPPRICE
				high: instrument.high
				low: instrument.low
				close: instrument.close
				startIdx: 0
				endIdx: instrument.close.length-1
		when 'Weighted'
			instrument.close = talib.WCLPRICE
				high: instrument.high
				low: instrument.low
				close: instrument.close
				startIdx: 0
				endIdx: instrument.close.length-1
		when 'Heikin-Ashi'
			close = talib.AVGPRICE
				open: instrument.open
				high: instrument.high
				low: instrument.low
				close: instrument.close
				startIdx: 0
				endIdx: instrument.close.length-1
			open = []
			prev = (instrument.close[0] + instrument.open[0]) / 2
			for x in [0..instrument.close.length-2]
				open[x] = (close[x] + prev) / 2
				prev = open[x]
			close = _.drop(close, 1)
			high = []
			low = []
			for x in [1..instrument.close.length-1]
				high[x-1] = Math.max(instrument.high[x], open[x-1], close[x-1])
				low[x-1] = Math.min(instrument.low[x], open[x-1], close[x-1])
			instrument.close = close
			instrument.open = open
			instrument.high = high
			instrument.low = low
			instrument.volumes = _.drop(instrument.volumes, 1)
	return instrument

#initialize plot marks
init: (context) ->

    info "BUYTFDIP'S BLAZIN BOT"
    info "..."
#plot marks
    setPlotOptions
        bought:
            color: 'rgba(0, 204, 0, .80)'
        sold:
            color: 'rgba(230, 0, 0, .80)'
        bears:
            color: 'rgba(192, 57, 43, .15)'
            secondary: false
            size: 5
        bulls:
            color: 'rgba(39, 174, 96, .15)'
            secondary: false
            size: 5
        "Book Profit":
            color: 'rgb(255, 102, 0)'
        "Stop Loss":
            color: 'rgb(0, 0, 0)'
        "RSI":
            color: 'rgba(230, 92, 0, .45)'
            secondary: true
            size: 3
            lineWidth: 2
        "Mid RSI":
            color: 'rgba(230, 0, 0, .85)'
            secondary: true
            size: 3
            lineWidth: 1.25  
        "High RSI":
            color: 'rgba(0, 0, 0, .85)'
            secondary: true
            size: 3
            lineWidth: 1.25            
        "Low RSI":
            color: 'rgba(0, 0, 0, .85)'
            secondary: true
            size: 3
            lineWidth: 1.25
        "MACD" :
            color: 'rgba(127, 63, 191, .55)'
            size: 5
            secondary: true
            lineWidth: 2
        "MACD Zero" :
            color: 'rgba(230, 0, 0, .85)'
            secondary: true
            size: 3
            lineWidth: .75  

#handle per tick
handle: (context, data) ->
    storage.consecutiveSellSignals ?= 0
    storage.consecutiveBuySignals ?= 0
    storage.wins ?= 0
    storage.losses ?= 0
    storage.sells ?= 0
    storage.lastSellPrice ?= null
    storage.buys ?= 0
    storage.bought ?= false
    storage.profitsbooked ?= false
    storage.profitsbooked2 ?= false
    storage.stoploss ?= false
    storage.sold ?= false
    storage.lastBuyPrice ?= null
    storage.lastValue ?= null
    storage.lastFisher ?= null
    i = data.instruments[0]
    startCurrency = @portfolio.positions[i.curr()].amount
    startAssets = @portfolio.positions[i.asset()].amount
    longPeriod = Math.min(parseInt((24*60)/i.interval) * NUMBER_OF_DAYS, i.size - 1)
    shortPeriod = parseInt(longPeriod/3)

    currentPrice = _.last(i.close)
    currentWorth = startCurrency + startAssets * currentPrice

    storage.initialWorth ?= currentWorth
    storage.initialPrice ?= currentPrice
    i = makeInstrument(i)

    rsi = talib.RSI
        inReal: i.close
        startIdx: 0
        endIdx: i.close.length - 1
        optInTimePeriod: RSI_P

    r_2 = rsi[rsi.length - 2]
    r_L = rsi[rsi.length - RSI_L]
    r = _.last(rsi)

    macd = talib.MACD
        inReal: i.close
        startIdx: 0
        endIdx: i.close.length - 1
        optInFastPeriod: MAC_FA_P
        optInSlowPeriod: MAC_SL_P
        optInSignalPeriod: MAC_SI_P

    mac = macd.outMACD
    sig = macd.outMACDSignal
    his = macd.outMACDHist

    h_2 = his[his.length - 2]
    h_L = his[his.length - MAC_L]
    h = _.last(his)
    
    m_2 = mac[mac.length - 2]
    m_L = mac[mac.length - MAC_L]
    m = _.last(mac)
    
    median = talib.MEDPRICE
        high: i.high
        low: i.low
        startIdx: i.high.length - 1 - longPeriod
        endIdx: i.high.length - 1

    high = talib.MAX
        inReal: median
        startIdx: 0
        endIdx: median.length - 1
        optInTimePeriod: longPeriod


    low = talib.MIN
        inReal: median
        startIdx: 0
        endIdx: median.length - 1
        optInTimePeriod: longPeriod

    high = _.last(high)
    low = _.last(low)
    median = _.last(median)

    value = (median - low) / (high - low)

    value = .33 * 2 * (value - .5)
    if (storage.lastValue != null)
        value += (.67 * storage.lastValue)

    if (value > .9999)
        value = .9999
    else if (value < -.9999)
        value = -.9999

    storage.lastValue = value

    value = (1 + value) / (1 - value)

    fisher = (.25 * Math.log(value))

    if (storage.lastFisher != null)
        fisher +=  (.5 * storage.lastFisher)
#buy sequence
        if (fisher > storage.lastFisher)
            storage.consecutiveSellSignals = 0
            storage.consecutiveBuySignals += 1
            plotMark
                bulls: _.last(i.high) * 1.03

            minimumCurrency = i.price * MINIMUM_ORDER_VALUE
            if (r > r_L and h >= MAC_O) and (storage.sold or !storage.bought and storage.consecutiveBuySignals >= CONSECUTIVE_BUY_SIGNALS)
                currentCurrency = startCurrency
                currentAssets = startAssets

                totalCurrencyToSpend = startCurrency * (PCT_OF_FUNDS_BUY/100)
                split = (totalCurrencyToSpend * (PCT_OF_SPLIT/100))

                if (split < minimumCurrency)
                    split = totalCurrencyToSpend

                amountRemaining = totalCurrencyToSpend
                infLoop = 0
                while (infLoop++ < 100 and amountRemaining >= minimumCurrency)
                    startingCurrency = @portfolio.positions[i.curr()].amount
                    startingAssets = @portfolio.positions[i.asset()].amount

                    ticker = trading.getTicker(i)
                    buyAmount = Math.min((split/ticker.buy)*.99, amountRemaining/ticker.buy)
                    price = (ticker.buy/ORDER_PRICE)
                    try
                        trading.buy i, ORDER_TYPE, buyAmount, price, 60 * @config.interval
                    catch error
                        if (/insufficient funds/i.exec(error))
                            currentCurrency = startingCurrency
                            currentAssets = startingAssets
                            break

                    sleep(30000)
                    i.update
                    currentCurrency = @portfolio.positions[i.curr()].amount
                    currentAssets = @portfolio.positions[i.asset()].amount
                    currencyDelta = (startingCurrency - currentCurrency)
                    if (currencyDelta != 0)
                        assetDelta = (currentAssets - startingAssets)
                        salePrice = (ticker.buy/ORDER_PRICE)
                        info "Bought #{assetDelta.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
                    amountRemaining -= currencyDelta

                totalBought = (currentAssets - startAssets)
                currencySpent = (startCurrency - currentCurrency)
                salePrice = (ticker.buy/ORDER_PRICE)
                info "Bought a total of #{totalBought.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
                info "Finished Buying!"
                storage.bought = true
                storage.sold = false
                storage.consecutiveBuySignals = 0
                storage.consecutiveSellSignals = 0
                storage.profitsbooked = false
                storage.lastBuyPrice = salePrice
                storage.buys++

                plotMark
                    bought: salePrice
#sell sequence
        else if (fisher < storage.lastFisher)
            storage.consecutiveSellSignals += 1
            storage.consecutiveBuySignals = 0
            plotMark
                bears: _.last(i.low) * 0.97
            if (!storage.sold and storage.bought and storage.consecutiveSellSignals >= CONSECUTIVE_SELL_SIGNALS and m < m_L and r < r_L)
                currentCurrency = startCurrency
                currentAssets = startAssets

                totalAssetsToSell = startAssets * (PCT_OF_ASSETS_SELL/100)
                split = (totalAssetsToSell * (PCT_OF_SPLIT/100))

                if (split < MINIMUM_ORDER_VALUE)
                    split = totalAssetsToSell

                amountRemaining = totalAssetsToSell
                infLoop = 0
                while (infLoop++ < 100 and amountRemaining >= MINIMUM_ORDER_VALUE)
                    startingCurrency = @portfolio.positions[i.curr()].amount
                    startingAssets = @portfolio.positions[i.asset()].amount

                    ticker = trading.getTicker(i)
                    sellAmount = Math.min(split*.99, amountRemaining)
                    price = (ticker.sell*ORDER_PRICE)
                    try
                        trading.sell i, ORDER_TYPE, sellAmount, price, 60 * @config.interval
                    catch error
                        if (/insufficient funds/i.exec(error))
                            currentCurrency = startingCurrency
                            currentAssets = startingAssets
                            break

                    sleep(30000)
                    i.update
                    currentCurrency = @portfolio.positions[i.curr()].amount
                    currentAssets = @portfolio.positions[i.asset()].amount
                    assetDelta = (startingAssets - currentAssets)
                    if (assetDelta != 0)
                        currencyDelta = (currentCurrency - startingCurrency)
                        salePrice = (ticker.sell*ORDER_PRICE)
                        warn "Sold #{assetDelta.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
                    amountRemaining -= assetDelta

                totalSold = (startAssets - currentAssets)
                currencyGain = (currentCurrency - startCurrency)
                salePrice = currencyGain/totalSold
                warn "Sold a total of #{totalSold.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
                warn "Finished Selling!"
                storage.sold = true
                storage.bought = false
                storage.profitsbooked = false
                storage.consecutiveBuySignals = 0
                storage.consecutiveSellSignals = 0
                storage.lastSellPrice = salePrice
                storage.sells++
                if (storage.lastBuyPrice != null)
                    if (salePrice > storage.lastBuyPrice)
                        storage.wins++
                    else
                        storage.losses++
                plotMark
                    sold: salePrice
        else
            storage.consecutiveBuySignals = 0
            storage.consecutiveSellSignals = 0
#profit take sequence 1
    if (BOOK_PROFIT_PCT > 0 and storage.bought and !storage.profitsbooked and (storage.lastBuyPrice *( 1 + (BOOK_PROFIT_PCT/100))) <= i.price)
        info "Time to book profits!"
        currentCurrency = startCurrency
        currentAssets = startAssets
    
        totalAssetsToSell = startAssets
        split = totalAssetsToSell
    
        if (split < MINIMUM_ORDER_VALUE)
            split = totalAssetsToSell
    
        amountRemaining = totalAssetsToSell
        infLoop = 0
        while (infLoop++ < 100 and amountRemaining >= MINIMUM_ORDER_VALUE)
            startingCurrency = @portfolio.positions[i.curr()].amount
            startingAssets = @portfolio.positions[i.asset()].amount
    
            ticker = trading.getTicker(i)
            sellAmount = Math.min(split*.9975, amountRemaining)
            price = (ticker.sell*ORDER_PRICE2)
            try
                trading.sell i, ORDER_TYPE2, sellAmount, price, 60 * @config.interval
            catch error
                if (/insufficient funds/i.exec(error))
                    currentCurrency = startingCurrency
                    currentAssets = startingAssets
                    break
    
            sleep(30000)
            i.update
            currentCurrency = @portfolio.positions[i.curr()].amount
            currentAssets = @portfolio.positions[i.asset()].amount
            assetDelta = (startingAssets - currentAssets)
            if (assetDelta != 0)
                currencyDelta = (currentCurrency - startingCurrency)
                salePrice = (i.price*ORDER_PRICE2)
                warn "Sold #{assetDelta.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
            amountRemaining -= assetDelta
    
        totalSold = (startAssets - currentAssets)
        currencyGain = (currentCurrency - startCurrency)
        salePrice = (i.price*ORDER_PRICE2)
        warn "Sold a total of #{totalSold.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
        warn "Finished Selling!"
        storage.lastSellPrice = salePrice
        storage.sells++
        if (storage.lastBuyPrice != null)
            if (salePrice > storage.lastBuyPrice)
                storage.wins++
            else
                storage.losses++
        plotMark
            "Book Profit": salePrice
        storage.profitsbooked = true
        if PCT_TO_BOOK < 100
            storage.bought = true
        if PCT_TO_BOOK == 100
            storage.sold = true
        else
            storage.consecutiveBuySignals = 0
            storage.consecutiveSellSignals = 0
#stop loss sequence
    if (STOP_LOSS_PCT > 0 and !storage.sold and storage.bought and (storage.lastBuyPrice /( 1 + (STOP_LOSS_PCT/100))) >= i.price)
        info "Stop loss initiated!"
        currentCurrency = startCurrency
        currentAssets = startAssets
    
        totalAssetsToSell = startAssets * (PCT_OF_ASSETS_SELL/100)
        split = (totalAssetsToSell * (PCT_OF_SPLIT/100))
    
        if (split < MINIMUM_ORDER_VALUE)
            split = totalAssetsToSell
    
        amountRemaining = totalAssetsToSell
        infLoop = 0
        while (infLoop++ < 100 and amountRemaining >= MINIMUM_ORDER_VALUE)
            startingCurrency = @portfolio.positions[i.curr()].amount
            startingAssets = @portfolio.positions[i.asset()].amount
    
            ticker = trading.getTicker(i)
            sellAmount = Math.min(split*.9975, amountRemaining)
            price = (ticker.sell*ORDER_PRICE3)
            try
                trading.sell i, ORDER_TYPE3, sellAmount, price, 60 * @config.interval
            catch error
                if (/insufficient funds/i.exec(error))
                    currentCurrency = startingCurrency
                    currentAssets = startingAssets
                    break
    
            sleep(30000)
            i.update
            currentCurrency = @portfolio.positions[i.curr()].amount
            currentAssets = @portfolio.positions[i.asset()].amount
            assetDelta = (startingAssets - currentAssets)
            if (assetDelta != 0)
                currencyDelta = (currentCurrency - startingCurrency)
                salePrice = (ticker.sell*ORDER_PRICE3)
                warn "Sold #{assetDelta.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
            amountRemaining -= assetDelta
    
        totalSold = (startAssets - currentAssets)
        currencyGain = (currentCurrency - startCurrency)
        salePrice = (ticker.sell*ORDER_PRICE3)
        warn "Sold a total of #{totalSold.toFixed(8)} #{i._pair[0].toUpperCase()} at #{salePrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
        warn "Finished Selling!"
        storage.lastSellPrice = salePrice
        storage.sells++
        if (storage.lastBuyPrice != null)
            if (salePrice > storage.lastBuyPrice)
                storage.wins++
            else
                storage.losses++
        plotMark
            "Stop Loss": salePrice
        storage.sold = true
        storage.bought = false
        storage.stoploss = true
    storage.lastFisher = fisher

#bot output log
    botPL = ((currentWorth - storage.initialWorth)/storage.initialWorth) * 100
    marketPL = ((currentPrice - storage.initialPrice)/storage.initialPrice) * 100

    debug "---------- BUYTFDIP'S BLAZIN BOT ----------"
    info "Current Price: #{currentPrice.toFixed(8)} #{i._pair[1].toUpperCase()}"
    info "Exchange Wallet: #{startCurrency.toFixed(8)} #{i._pair[1].toUpperCase()} and #{startAssets.toFixed(8)} #{i._pair[0].toUpperCase()}"
    debug "Start Worth: #{storage.initialWorth.toFixed(8)} #{i._pair[1].toUpperCase()}"
    if storage.initialWorth.toFixed(8) < currentWorth.toFixed(8)
        info "Current Worth: #{currentWorth.toFixed(8)} #{i._pair[1].toUpperCase()}"
    if storage.initialWorth.toFixed(8) > currentWorth.toFixed(8)
        warn "Current Worth: #{currentWorth.toFixed(8)} #{i._pair[1].toUpperCase()}"
    debug "Current Buy Signal Level #{h}"
        
    if (botPL >= 0)
        info "Bot P/L: #{botPL.toFixed(2)}%"
    else
        warn "Bot P/L: #{botPL.toFixed(2)}%"

    if (marketPL >= 0)
        info "Buy&Hold P/L: #{marketPL.toFixed(2)}%"
    else
        warn "Buy&Hold P/L: #{marketPL.toFixed(2)}%"

    info "Buys: #{storage.buys} Sells: #{storage.sells} Total Orders: #{storage.buys + storage.sells}"
    if storage.wins > storage.losses
        info "Wins: #{storage.wins} Losses: #{storage.losses} Total Trades: #{storage.wins + storage.losses}"
    if storage.wins < storage.losses
        warn "Wins: #{storage.wins} Losses: #{storage.losses} Total Trades: #{storage.wins + storage.losses}"
    if storage.wins == storage.losses
        debug "Wins: #{storage.wins} Losses: #{storage.losses} Total Trades: #{storage.wins + storage.losses}"        
#graph plots
    plot
        "RSI": r
    plot
        "Low RSI": 65
    plot
        "Mid RSI": 50
    plot
        "High RSI": 35
    plot
        "MACD": h
    plot
        "MACD Zero": 0
    debug "-----------------------------------------"
    info " "
